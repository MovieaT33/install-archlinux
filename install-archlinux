#!/bin/bash

# Installation script with LUKS encryption using LVM for Arch Linux with UEFI 64-bit.
# Copyright (C) 2024  MovieaT33

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

RED="\033[31m"
GREEN="\033[32m"
RESET="\033[0m"

ERROR="${RED}Error${RESET}"
OK="${GREEN}Ok${RESET}"

# Pre-installation

## Set the console keyboard layout and font

### The default console keymap is US. Available layouts can be listed with:
# localectl list-keymaps

### To set the keyboard layout, pass its name to loadkeys(1). For example, to set a United States keyboard layout:

KEYBOARD_LAYOUT="us"

loadkeys $KEYBOARD_LAYOUT
echo "Current keyboard layout: $KEYBOARD_LAYOUT"

### Console fonts are located in /usr/share/kbd/consolefonts/ and can likewise be set with setfont(8) omitting the path and file extension. For example, to use one of the largest fonts suitable for HiDPI screens, run:

LARGE_FONT="ter-132b"
DEFAULT_FONT=""

read -p "Want a larger font? [y/N] " answer
answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')

if [[ "$answer" == "y" ]]; then
	FONT=$LARGE_FONT
else
	FONT=$DEFAULT_FONT
fi

setfont $FONT
echo "Current font: $FONT"

## Verify the boot mode

### To verify the boot mode, check the UEFI bitness:
# cat /sys/firmware/efi/fw_platform_size

EXPECTED_FW_PLATFORM_SIZE=64
fw_platform_size=$(cat /sys/firmware/efi/fw_platform_size)

printf "Verifying the boot mode..."

if [[ $fw_platform_size -ne $EXPECTED_FW_PLATFORM_SIZE ]]; then
	echo -e " ${ERROR}: The system must be UEFI ${EXPECTED_FW_PLATFORM_SIZE}-bit, not ${fw_platform_size}-bit"
	exit 1
else
	echo -e " ${OK}"
fi

## Connect to the internet

### Ensure your network interface is listed and enabled, for example with ip-link(8):
# ip link

### The connection may be verified with ping:
# ping archlinux.org

HOST="archlinux.org"
PING_COUNT=4

printf "Pinging host "$PING_COUNT" times..."

if ! ping -c $PING_COUNT $HOST > /dev/null; then
	echo -e " ${ERROR}: Unable to reach ${HOST}"
	exit 1
else
	echo -e " ${OK}"
fi

## Update the system clock

### Use timedatectl(1) to ensure the system clock is synchronized
timedatectl set-timezone UTC
echo "Current time:"
timedatectl

## Partition the disks

DEVICE="/dev/vda"
EFI_DEVICE="${DEVICE}1"
ENCRYPT_DEVICE="${DEVICE}2"
ENCRYPTED_DEVICE_NAME="crypt"
VOLUME_GROUP_NAME="vg0"

read -p "Want to format device? [Y/n] " answer
answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')

if [[ "$answer" == "" || "$answer" == "y" ]]; then
	# cfdisk $DEVICE
	echo -e "g\nn\n1\n\n+1G\nt\n1\nw" | fdisk $DEVICE
	echo -e "n\n2\n\n\n\nt\n2\n44\nw" | fdisk $DEVICE
fi

## Encrypt device

### Create luks partition

read -p "Want to encrypt device? [Y/n] " answer
answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')

if [[ "$answer" == "" || "$answer" == "y" ]]; then
	echo "Encrypting ${ENCRYPT_DEVICE} device..."
	cryptsetup luksFormat $ENCRYPT_DEVICE

### Open the encrypted device

	echo "Opening the $ENCRYPT_DEVICE device as $ENCRYPTED_DEVICE_NAME..."
	cryptsetup luksOpen $ENCRYPT_DEVICE $ENCRYPTED_DEVICE_NAME
fi

### Use the device as phisical volume

read -p "Want to create volumes? [Y/n] " answer
answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')

if [[ "$answer" == "" || "$answer" == "y" ]]; then
	printf "Using the device as physical volume..."
	pvcreate "/dev/mapper/${ENCRYPTED_DEVICE_NAME}"
	echo -e " ${OK}"

### Create a volume group

	echo "Creating a $VOLUME_GROUP_NAME volume group..."
	vgcreate $VOLUME_GROUP_NAME /dev/mapper/$ENCRYPTED_DEVICE_NAME
	echo -e " ${OK}"

## Create the logical volumes

	SWAP_SIZE="4G"

	echo "Creating the logical volumes..."

	printf "Creating the swap logical volume with $SWAP_SIZE size..."
	lvcreate -n swap -L $SWAP_SIZE $VOLUME_GROUP_NAME
	echo -e " ${OK}"

	printf "Creating the root logical volume..."
	lvcreate -n root -l 100%FREE $VOLUME_GROUP_NAME
	echo -e " ${OK}"
fi

## Format the partitions

read -p "Want to format sections? [Y/n] " answer
answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')

if [[ "$answer" == "" || "$answer" == "y" ]]; then
	echo "Formatting the partitions..."

	echo "Formatiing efi..."
	mkfs.fat -F32 $EFI_DEVICE

	echo "Formatting swap..."
	mkswap "/dev/${VOLUME_GROUP_NAME}/swap"

	echo "Formatiing root..."
	mkfs.ext4 "/dev/${VOLUME_GROUP_NAME}/root"
fi

## Mount the file systems

MNT="/mnt"

read -p "Want to mount file system? [Y/n] " answer
answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')

if [[ "$answer" == "" || "$answer" == "y" ]]; then
	echo "Mounting file systems..."

	echo "Mounting efi..."
	mount --mkdir $EFI_DEVICE /mnt/boot

	echo "Mounting root..."
	mount "/dev/${VOLUME_GROUP_NAME}/root" $MNT
	
	echo "Mounting swap..."
	swapon "/dev/${VOLUME_GROUP_NAME}/swap"

# Installation

## Select the mirrors

read -p "Want to install and use reflector? [Y/n] " answer
answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')

if [[ "$answer" == "" || "$answer" == "y" ]]; then
	sudo pacman -Sy reflector

	reflector -c "United Kingdom" --age 6 --protocol https --sort rate --save /etc/pacman.d/mirrorlist

	systemctl enable reflector.timer
	systemctl start reflector.timer

echo -e "The installation was ${GREEN}successful${RESET}!"
echo -e "You can ${RED}uninstall${RESET} installation script by \`make uninstall\` command"
