1#!/bin/bash

# Installation script with LUKS encryption using LVM for Arch Linux with UEFI 64-bit.
# Copyright (C) 2024  MovieaT33

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set_console_keyboard_layout() {
    local console_keymap="$1"
    loadkeys "$console_keymap"
}

set_font() {
    local font="$1"
    setfont "$font"
}

set_default_font() {
    set_font ""
}

set_large_font() {
    set_font "ter-132b"
}

get_uefi_mode() {
    if [[ -d /sys/firmware/efi ]]; then
        if [[ "$(getconf LONG_BIT)" -eq 64 ]]; then
            echo 64
        else
            echo 32
        fi
    else
        echo "Not in UEFI mode"
        exit 1
    fi
}

verify_boot_mode() {
    local EXPECTED_UEFI_BITNESS=64

    local uefi_mode=$(get_uefi_mode)
    if [[ "$uefi_mode" -ne "$EXPECTED_UEFI_BITNESS" ]]; then
        echo "Unsupported UEFI mode: $uefi_mode-bit. Expected: $EXPECTED_UEFI_BITNESS-bit."
        exit 1
    else
        echo "UEFI mode is supported: $uefi_mode-bit."
    fi
}

verify_internet_connection() {
    local HOST="archlinux.com"

    if ! ping -c 1 archlinux.com > /dev/null; then
        echo "No internet connection"
        exit 1
    fi
}

verify_system_clock() {
    if ! timedatectl | grep "Time zone: UTC" > /dev/null; then
        echo "Unsynced system clock"
        exit 1
    fi
}

partition_disk() {
    fdisk $DISK <<EOF
g
n
1

+1G
t
EFI System
n
2


t
2
Linux LVM
p
w
EOF
}

format_luks_disk() {
    local disk="$1"
    cryptsetup luksFormat "$disk"
}

create_luks_disk_mapping() {
    local disk="$1"
    local mapping_name="$2"
    cryptsetup open "$disk" "$mapping_name"
}

create_physical_volume() {
    local mapping_name="$1"
    pvcreate "/dev/mapper/${mapping_name}"
}

create_volume_group() {
    local volume_name="$1"
    local mapping_name="$2"
    vgcreate "$volume_name" "/dev/mapper/${mapping_name}"
}

create_logical_volumes() {
    local volume_name="$1"

    lvcreate -L 4G "$volume_name" -n swap
    lvcreate -l 100%FREE "$volume_name" -n root
}

make_efi_system() {
    local efi_system="$1"
    mkfs.fat -F32 "$efi_system"
}

make_linux_filesystem() {
    local linux_filesystem="$1"
    mkfs.ext4 "$linux_filesystem"
}

make_swap() {
    local swap="$1"
    mkswap "$swap"
}

generate_fstab() {
    local mnt="$1"
    genfstab -U "$mnt" >> "${mnt}/etc/fstab"
}

set_time_zone() {
    local mnt="$1"
    local region="$2"
    local city="$3"

    arch-chroot "$mnt" ln -sf "/usr/share/zoneinfo/${region}/${city}" "/etc/localtime"
    arch-chroot "$mnt" hwclock --systohc
}

set_console_keyboard_layout "us"
set_default_font # set_large_font
verify_boot_mode
verify_internet_connection
verify_system_clock

DISK="/dev/vda"
EFI_SYSTEM="/dev/vda1"
LINUX_LVM="/dev/vda2"
MAPPING_NAME="crypt"
VOLUME_NAME="vg0"
MNT="/mnt"

partition_disk
format_luks_disk "$LINUX_LVM"
create_luks_disk_mapping "$LINUX_LVM" "$MAPPING_NAME"
create_physical_volume "$MAPPING_NAME"
create_volume_group "$VOLUME_NAME" "$MAPPING_NAME"
create_logical_volumes "$VOLUME_NAME"

make_efi_system "$EFI_SYSTEM"
make_linux_filesystem "/dev/mapper/${VOLUME_NAME}-root"
make_swap "/dev/mapper/${VOLUME_NAME}-swap"

mount "/dev/mapper/${VOLUME_NAME}-root" "$MNT"
mount --mkdir "$EFI_SYSTEM" "${MNT}/boot/efi"
swapon "/dev/mapper/${VOLUME_NAME}-swap"

pacstrap -K "$MNT" base linux linux-firmware \
                   networkmanager reflector \
                   lvm2 grub efibootmgr

REGION=Europe
CITY=London

generate_fstab "$MNT"
set_time_zone "$MNT" "$REGION" "$CITY"

arch-chroot "$MNT" mkinitcpio -P
arch-chroot "$MNT" grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB --recheck
arch-chroot "$MNT" grub-mkconfig -o /boot/grub/grub.cfg
